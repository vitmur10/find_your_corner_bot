import sqlite3
import aiogram
import keybord
import n
from Const import bot, dp, cur, region_list, characters
from analytics import analytics


# Initialize bot and dispatcher


@dp.message_handler(commands=['start'])
@analytics
async def hello(message: aiogram.types.Message):
    await message.answer("     Hello everybody üëã\n–¢–∏ —î–¥–∏–Ω–∏–π, —Ö—Ç–æ –Ω–∞—Å –∑–Ω–∞–π—à–æ–≤, –∞–ª–µ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—ñ–πü§ó\n"
                         "–¢–∏ –≤–∂–µ –ø—ñ–¥–Ω—è–≤ –µ–∫–æ–Ω–æ–º—ñ–∫—É –£–∫—Ä–∞—ó–Ω–∏, –±—É–¥—É—á–∏ —Ç—É—Çüá∫üá¶ \n"
                         "–¢–∏ –≥–æ—Ç–æ–≤–∏–π –∑–Ω–∞–π—Ç–∏ —Ä–∞–π—Å—å–∫–µ –º—ñ—Å—Ü–µ –±–µ–∑–ø–µ–∫–∏ —Ç–∞ —â–µ –π –ø–æ—á—É–≤–∞—Ç–∏—Å—è —è–∫ –≤–¥–æ–º–∞?\n"
                         "–¢–æ–¥—ñ –æ–±–∏—Ä–∞–π —Å–≤—ñ–π –∫—É—Ç–æ—á–æ–∫üëá")
    await message.answer("–í–∫–∞–∂—ñ—Ç—å —Å–≤–æ—é –æ–±–ª–∞—Å—Ç—å...")


@dp.message_handler(commands=['region'])
async def regio(message: aiogram.types.Message):
    await message.answer(n.region)


@dp.message_handler(
    commands=['forgotten_place', 'eat', 'nature', 'active', 'hotels', 'areas', 'museums', 'panoramic', 'church',
              'sights', 'other'])
@analytics
async def loc(message: aiogram.types.Message):
    try:
        for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
                "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE region=? and type = ? LIMIT 1 OFFSET ?",
                (n.region, message.text[1:], n.n_forgotten)):
            await bot.send_photo(message.chat.id,
                                 photo,
                                 f"ü´ß{name}\n"
                                 f"{about}\n"
                                 f"üìç–ê–¥—Ä–µ—Å–∞ - {address} {city}\n"
                                 f"{'–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - ' + str(metro) if city == '–ö–∏—ó–≤' else '–Ø–∫ –¥—ñ—Å—Ç–∞—Ç–∏—Å—è - ' + str(metro)}\n"
                                 f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                                 f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                                 f"{fishnet}", reply_markup=keybord.loc_keybord[message.text[1:]])
    except sqlite3.InterfaceError:
        await message.answer(f"""–í–∫–∞–∂—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –≤–∞—à —Ä–µ–≥—ñ–æ–Ω....\n –æ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä–µ–≥—ñ–æ–Ω–∏ - {region_list}""")


@dp.message_handler(commands=['Support_the_product'])
@analytics
async def other(message: aiogram.types.Message):
    await message.answer('–†–µ–∫–≤—ñ–∑–∏—Ç–∏üëá', reply_markup=keybord.keyboard_donat)


@dp.message_handler(commands=['discussion'])
@analytics
async def discussion(message: aiogram.types.Message):
    await message.answer('–û–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—èüëá', reply_markup=keybord.keyboard_discussion)


@dp.message_handler(commands=['Search_by_subway'])
@analytics
async def other(message: aiogram.types.Message):
    await message.answer('–ì—ñ–ª–∫–∏ –º–µ—Ç—Ä–æ', reply_markup=keybord.keyboard_metro)


@dp.message_handler(content_types=['text'])
@analytics
async def loc(message: aiogram.types.Message):
    if message.text == '–ß–µ—Ä–≤–æ–Ω–∞ –≥—ñ–ª–∫–∞':
        await message.answer('–ß–µ—Ä–≤–æ–Ω–∞ –≥—ñ–ª–∫–∞', reply_markup=keybord.keyboard_red_branch1)
    elif message.text == '–°–∏–Ω—è –≥—ñ–ª–∫–∞':
        await message.answer('–°–∏–Ω—è –≥—ñ–ª–∫–∞', reply_markup=keybord.keyboard_blue_branch1)
    elif message.text == '–ó–µ–ª–µ–Ω–∞ –≥—ñ–ª–∫–∞':
        await message.answer('–ó–µ–ª–µ–Ω–∞ –≥—ñ–ª–∫–∞', reply_markup=keybord.keyboard_green_branch1)

    for key in characters:
        if key == message.text:
            await message.answer(
                characters[key])
        elif set(key) == set(message.text.lower()):
            await message.answer(
                characters[key])

    for i in region_list:
        if i == message.text:
            n.region = i
            n.n_cathedrals = 0
            n.cathedrals_list.clear()
            n.n_historical_monument = 0
            n.historical_monument_list.clear()
            n.n_other = 0
            n.other_list.clear()
            n.n_hotels = 0
            n.hotels_list.clear()
            n.n_nature = 0
            n.nature_list.clear()
            n.n_museums = 0
            n.museums_list.clear()
            n.n_areas = 0
            n.areas_list.clear()
            n.n_panoramic = 0
            n.panoramic_list.clear()
            n.n_forgotten = 0
            n.forgotten_list.clear()
            n.n_eit = 0
            n.eit_list.clear()
            n.n_active = 0
            n.active_list.clear()
    await message.answer(f"""–í–∏ –≤–∫–∞–∑–∞–ª–∏ —Ä–µ–≥—ñ–æ–Ω {n.region}""")
    return n.region


if __name__ == '__main__':
    aiogram.executor.start_polling(dp, skip_updates=True)
