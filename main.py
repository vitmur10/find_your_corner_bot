import random
import aiogram
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

import keybord, n
from Const import bot, dp, cur, con


# Initialize bot and dispatcher


def analytics(func: callable):
    total_messages = 0
    users = set()
    total_users = 0

    def analytics_wrapper(message):
        nonlocal total_messages, total_users
        total_messages += 1

        if message.chat.id not in users:
            users.add(message.chat.id)
            total_users += 1
        data = [
            (
                total_users, message.text, total_messages
            )
        ]
        cur.executemany("INSERT INTO analytics VALUES(?, ?, ?)", data)
        con.commit()
        return func(message)

    return analytics_wrapper


@dp.message_handler(commands=['start'])
@analytics
async def hello(message: aiogram.types.Message):
    await message.answer("     Hello everybody üëã\n–¢–∏ —î–¥–∏–Ω–∏–π, —Ö—Ç–æ –Ω–∞—Å –∑–Ω–∞–π—à–æ–≤, –∞–ª–µ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—ñ–πü§ó\n"
                         "–¢–∏ –≤–∂–µ –ø—ñ–¥–Ω—è–≤ –µ–∫–æ–Ω–æ–º—ñ–∫—É –£–∫—Ä–∞—ó–Ω–∏, –±—É–¥—É—á–∏ —Ç—É—Çüá∫üá¶ \n"
                         "–¢–∏ –≥–æ—Ç–æ–≤–∏–π –∑–Ω–∞–π—Ç–∏ —Ä–∞–π—Å—å–∫–µ –º—ñ—Å—Ü–µ –±–µ–∑–ø–µ–∫–∏ —Ç–∞ —â–µ –π –ø–æ—á—É–≤–∞—Ç–∏—Å—è —è–∫ –≤–¥–æ–º–∞?\n"
                         "–¢–æ–¥—ñ –æ–±–∏—Ä–∞–π —Å–≤—ñ–π –∫—É—Ç–æ—á–æ–∫üëá")




@dp.message_handler(content_types=['text'])
@analytics
async def loc(message: aiogram.types.Message):
    a = ['–í—ñ–¥–ø–æ—á–∏–Ω—å', '–í—Å–µ –±—É–¥–µ –¥–æ–±—Ä–µ']
    b = ['–£ —Ç–µ–±–µ –¥—É–∂–µ –≥–∞—Ä–Ω–∞ –ø–æ—Å–º—ñ—à–∫–∞', '–ù–µ –¥—É–º–∞–π –ø—Ä–æ –ø–æ–≥–∞–Ω–µ', '–í—Å–µ –±—É–¥–µ –¥–æ–±—Ä–µ']
    c = ['–£ —Ç–µ–±–µ –≤—Å–µ –≤–∏–π–¥–µ', '–í—Å–µ –±—É–¥–µ –¥–æ–±—Ä–µ']
    characters = {
        'z': '–í–∏–π–¥–∏ –æ—Ç—Å—é–¥–∞ —Ä–æ–∑–±—ñ–π–Ω–∏–∫üßèüßèüßè',
        'v': '–ü–∏–∑–¥—É–π—Ç–µ –Ω–∞—Ö—É–π –æ—Ç—Å—é–¥–∞ –π–æ–±–∞–Ω–∏—î –ø—ñ–¥–∞—Ä–∞—Å–∏üë®‚Äçü¶≤üë®‚Äçü¶≤üë®‚Äçü¶≤',
        'vz': '–ü–∏–∑–¥–µ—Ü—å —Ä–æ—Å—ñ–π—Å—å–∫—ñ–π —Ñ–µ–¥–µ—Ä–∞—Ü—ñ—ó‚ö∞Ô∏è‚ö∞Ô∏è‚ö∞Ô∏è',
        '–Ø –≤—Ç–æ–º–∏–≤—Å—è': a[random.randrange(0, len(a))],
        '–ú–µ–Ω—ñ —Å—É–º–Ω–æ': b[random.randrange(0, len(b))],
        '–Ø –±—ñ–ª—å—à–µ –Ω–µ –º–æ–∂—É': c[random.randrange(0, len(c))],
        '–Ø –≤—Ç–æ–º–∏–ª–∞—Å—è': a[random.randrange(0, len(a))]
    }
    for key in characters:
        if key == message.text:
            await message.answer(
                characters[key])
        elif set(key) == set(message.text.lower()):
            await message.answer(
                characters[key])

    if message.text == "–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç":
        await message.answer('–†–µ–∫–≤—ñ–∑–∏—Ç–∏üëá', reply_markup=keybord.keyboard_donat)
    elif message.text == '–ü–æ—à—É–∫ –ø–æ –º–µ—Ç—Ä–æ':
        await message.answer('–ì—ñ–ª–∫–∏ –º–µ—Ç—Ä–æ', reply_markup=keybord.keyboard_metro)
    elif message.text == '–ß–µ—Ä–≤–æ–Ω–∞ –≥—ñ–ª–∫–∞':
        await message.answer('–ß–µ—Ä–≤–æ–Ω–∞ –≥—ñ–ª–∫–∞', reply_markup=keybord.keyboard_red_branch1)
    elif message.text == '–°–∏–Ω—è –≥—ñ–ª–∫–∞':
        await message.answer('–°–∏–Ω—è –≥—ñ–ª–∫–∞', reply_markup=keybord.keyboard_blue_branch1)
    elif message.text == '–ó–µ–ª–µ–Ω–∞ –≥—ñ–ª–∫–∞':
        await message.answer('–ó–µ–ª–µ–Ω–∞ –≥—ñ–ª–∫–∞', reply_markup=keybord.keyboard_green_branch1)


@dp.message_handler(commands=['forgotten_place'])
async def forgotten_place(message: aiogram.types.Message):
    await bot.send_message(message.chat.id,"–û—Å—å –∑–∞–±—É—Ç—ñ –º—ñ—Å—Ü—è –ö–∏—î–≤–∞")
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE type = '–ó–∞–±—É—Ç—ñ –º—ñ—Å—Ü—è –ö–∏—î–≤–∞'LIMIT 1 OFFSET ?", [n.n_forgotten]):
        await bot.send_photo(message.chat.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}", reply_markup=keybord.keyboard_inline_forgotten)


@dp.message_handler(commands=['eat'])
async def eat(message: aiogram.types.Message):
    await bot.send_message(message.chat.id,'–û—Å—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–µ –º–æ–∂–Ω–∞ –ø–æ—ó—Å—Ç–∏')
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE type = '–ö–∞—Ñ–µ'LIMIT 1 OFFSET ?",
            [n.n_eit]):
        await bot.send_photo(message.chat.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}", reply_markup=keybord.keyboard_inline_cafe)


@dp.message_handler(commands=['nature'])
async def nature(message: aiogram.types.Message):
    await bot.send_message(message.chat.id,"–û—Å—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É –Ω–∞ –ø—Ä–∏—Ä–æ–¥—ñ")
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost FROM location WHERE type = '–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ –Ω–∞ –ø—Ä–∏—Ä–æ–¥—ñ' LIMIT 1 OFFSET ?",
            [n.n_nature]):
        await bot.send_photo(message.chat.id, photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}", reply_markup=keybord.keyboard_inline_nature)


@dp.message_handler(commands=['active'])
async def active(message: aiogram.types.Message):
    await bot.send_message(message.chat.id,"–û—Å—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É")
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost FROM location WHERE type = '–ê–∫—Ç–∏–≤–Ω–∏–π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫' LIMIT 1 OFFSET ?", [n.n_active]):
        await bot.send_photo(message.chat.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}"
                             f"{fishnet}", reply_markup=keybord.keyboard_inline_active)


@dp.message_handler(commands=['hotels'])
async def hotels(message: aiogram.types.Message):
    await bot.send_message(message.chat.id,'–û—Å—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≥–æ—Ç–µ–ª—ñ–≤')
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost FROM location WHERE type = '–ì–æ—Ç–µ–ª—å' LIMIT 1 OFFSET ?",
            [n.n_hotels]):
        await bot.send_photo(message.chat.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}", reply_markup=keybord.keyboard_inline_hotels)


@dp.message_handler(commands=['areas'])
async def areas(message: aiogram.types.Message):
    await bot.send_message(message.chat.id,'–û—Å—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø–ª–æ—â—ñ–≤')
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost FROM location WHERE type = '–ü–ª–æ—â–∞' LIMIT 1 OFFSET ?",
            [n.n_areas]):
        await bot.send_photo(message.chat.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}", reply_markup=keybord.keyboard_inline_areas)


@dp.message_handler(commands=['museums'])
async def museums(message: aiogram.types.Message):
    await bot.send_message(message.chat.id,'–û—Å—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –º—É–∑–µ—ó–≤')
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost FROM location WHERE type = '–ú—É–∑–µ–π' LIMIT 1 OFFSET ?",
            [n.n_museums]):
        await bot.send_photo(message.chat.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}", reply_markup=keybord.keyboard_inline_museums)


@dp.message_handler(commands=['panoramic'])
async def panoramic(message: aiogram.types.Message):
    await bot.send_message(message.chat.id,'–û—Å—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –º—ñ—Å—Ü—å —ñ–∑ –ø–∞–Ω–æ—Ä–∞–º–Ω–∏–º –≤–∏–¥–æ–º')
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost FROM location WHERE type = '–ü–∞–Ω–æ—Ä–∞–º–Ω–∏–π –≤–∏–¥' LIMIT 1 OFFSET ?",
            [n.n_panoramic]):
        await bot.send_photo(message.chat.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}", reply_markup=keybord.keyboard_inline_panoramic)


@dp.message_handler(commands=['church'])
async def church(message: aiogram.types.Message):
    await bot.send_message(message.chat.id, '–û—Å—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Ü–µ—Ä–∫–≤—ñ–≤, —Å–æ–±–æ—Ä—ñ–≤, –º–æ–Ω–∞—Å—Ç–∏—Ä—ñ–≤')
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost FROM location WHERE type = '–¶–µ—Ä–∫–≤–∏, —Å–æ–±–æ—Ä–∏, –º–æ–Ω–∞—Å—Ç–∏—Ä—ñ' LIMIT 1 OFFSET ?",
            [n.n_cathedrals]):
        await bot.send_photo(message.chat.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}", reply_markup=keybord.keyboard_inline_cathedrals)


@dp.message_handler(commands=['sights'])
async def sights(message: aiogram.types.Message):
    await bot.send_message(message.chat.id, "–û—Å—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –ø–∞–º'—è—Ç–æ–∫")
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost FROM location WHERE type = '–Ü—Å—Ç–æ—Ä–∏—á–Ω–∞ –ø–∞–º—è—Ç–∫–∞' LIMIT 1 OFFSET ?",
            [n.n_historical_monument]):
        await bot.send_photo(message.chat.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}", reply_markup=keybord.keyboard_inline_historical_monument)


@dp.message_handler(commands=['other'])
async def other(message: aiogram.types.Message):
    await bot.send_message(message.chat.id, '–û—Å—å —ñ–Ω—à—ñ –ª–æ–∫–∞—Ü—ñ—ó')
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
        "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost FROM location WHERE type = '–Ü–Ω—à–µ' LIMIT 1 OFFSET ?",
        [n.n_other]):
        await bot.send_photo(message.chat.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}", reply_markup=keybord.keyboard_inline_other)


@dp.callback_query_handler(lambda c: c.data == 'Independence_Square')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ú–∞–π–¥–∞–Ω –ù–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Heroes_of_the_Dnipro')
async def heroes_of_the_dnipro(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ì–µ—Ä–æ—ó–≤ –î–Ω—ñ–ø—Ä–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Minsk')
async def minsk(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ú—ñ–Ω—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Obolon')
async def obolon(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–û–±–æ–ª–æ–Ω—å'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Petrivka')
async def petrivka(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ü–µ—Ç—Ä—ñ–≤–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Taras_Shevchenko')
async def taras_Shevchenko(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–¢–∞—Ä–∞—Å–∞ –®–µ–≤—á–µ–Ω–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Contract_area')
async def contract_area(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ö–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤–∞ –ø–ª–æ—â–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Postal_square')
async def postal_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ü–æ—à—Ç–æ–≤–∞ –ø–ª–æ—â–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Leo_Tolstoy_Square')
async def leo_tolstoy_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ü–ª–æ—â–∞ –õ—å–≤–∞ –¢–æ–ª—Å—Ç–æ–≥–æ'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Olympic')
async def olympic(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–û–ª—ñ–º–ø—ñ–π—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Palace_Ukraine')
async def palace_Ukraine(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ü–∞–ª–∞—Ü –£–∫—Ä–∞—ó–Ω–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Lybidska')
async def lybidska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–õ–∏–±—ñ–¥—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Demyivska')
async def holosiivska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–î–µ–º–∏—ó–≤—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Holosiivska')
async def next1(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ì–æ–ª–æ—Å—ñ—ó–≤—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Vasylkivska')
async def vasylkivska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–í–∞—Å–∏–ª—å–∫—ñ–≤—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Exhibition_center')
async def exhibition_center(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–í–∏—Å—Ç–∞–≤–æ—á–Ω–∏–π —Ü–µ–Ω—Ç—Ä'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Racetrack')
async def racetrack(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–Ü–ø–æ–¥—Ä–æ–º'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Teremka')
async def teremka(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–¢–µ—Ä–µ–º–∫–∏'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Red_village')
async def red_village(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ß–µ—Ä–≤–æ–Ω–∏–π —Ö—É—Ç—ñ—Ä'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Boryspilska')
async def boryspilska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ë–æ—Ä–∏—Å–ø—ñ–ª—å—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Vyrlitsa')
async def vyrlitsa(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–í–∏—Ä–ª–∏—Ü—è'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Kharkivska')
async def kharkivska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Poznyaks')
async def poznyaks(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ü–æ–∑–Ω—è–∫–∏'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Slavutych')
async def slavutych(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–°–ª–∞–≤—É—Ç–∏—á'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Vydubychi')
async def vydubychi(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–í–∏–¥—É–±–∏—á—ñ'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Friendship_of_peoples')
async def friendship_of_peoples(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–î—Ä—É–∂–±–∞ –Ω–∞—Ä–æ–¥—ñ–≤'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Klovska')
async def klovska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ö–ª–æ–≤—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Pecherska')
async def pecherska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ü–µ—á–µ—Ä—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Palace_of_Sports')
async def palace_of_sports(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Golden_Gate')
async def golden_Gate(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ó–æ–ª–æ—Ç—ñ –≤–æ—Ä–æ—Ç–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Lukyanivska')
async def lukyanivska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–õ—É–∫—è–Ω—ñ–≤—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'dear_ones')
async def dear_ones(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–î–æ—Ä–æ–≥–æ–∂–∏—á—ñ'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'raw')
async def raw(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–°–∏—Ä–µ—Ü—å'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Akademistechko')
async def akademistechko(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ê–∫–∞–¥–µ–º–º—ñ—Å—Ç–µ—á–∫–æ'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Zhytomyr')
async def zhytomyr(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Svyatoshyn')
async def svyatoshyn(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–°–≤—è—Ç–æ—à–∏–Ω'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Nykvy')
async def nykvy(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ù–∏–≤–∫–∏'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Beresteyska')
async def beresteyska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ë–µ—Ä–µ—Å—Ç–µ–π—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Shulyavska')
async def shulyavska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–®—É–ª—è–≤—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Polytechnic_Institute')
async def polytechnic_Institute(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ü–æ–ª—ñ—Ç–µ—Ö–Ω—ñ—á–Ω–∏–π —ñ–Ω—Å—Ç–∏—Ç—É—Ç'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Svyatoshyn')
async def svyatoshyn(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–°–≤—è—Ç–æ—à–∏–Ω'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Station')
async def station(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–í–æ–∫–∑–∞–ª—å–Ω–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'University')
async def university(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Theatrical')
async def theatrical(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Khreshchatyk')
async def khreshchatyk(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–•—Ä–µ—â–∞—Ç–∏–∫'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Arsenal')
async def arsenal(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ê—Ä—Å–µ–Ω–∞–ª—å–Ω–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Dnipro')
async def dnipro(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–î–Ω—ñ–ø—Ä–æ'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Hydropark')
async def hydropark(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ì—ñ–¥—Ä–æ–ø–∞—Ä–∫'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Left_bank')
async def left_bank(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–õ—ñ–≤–æ–±–µ—Ä–µ–∂–Ω–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Gift')
async def gift(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–î–∞—Ä–Ω–∏—Ü—è'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Chernihivska')
async def chernihivska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Lisova')
async def lisova(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–õ—ñ—Å–æ–≤–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Next_red_branch')
async def next_red_branch(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ß–µ—Ä–≤–æ–Ω–∞ –≥—ñ–ª–∫–∞', reply_markup=keybord.keyboard_red_branch2)


@dp.callback_query_handler(lambda c: c.data == 'Back_red_branch')
async def back_red_branch(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ß–µ—Ä–≤–æ–Ω–∞ –≥—ñ–ª–∫–∞', reply_markup=keybord.keyboard_red_branch1)


@dp.callback_query_handler(lambda c: c.data == 'Next_blue_branch')
async def next_blue_branch(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–°–∏–Ω—è –≥—ñ–ª–∫–∞', reply_markup=keybord.keyboard_blue_branch2)


@dp.callback_query_handler(lambda c: c.data == 'Back_blue_branch')
async def back_blue_branch(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–°–∏–Ω—è –≥—ñ–ª–∫–∞', reply_markup=keybord.keyboard_blue_branch1)


@dp.callback_query_handler(lambda c: c.data == 'Next_green_branch')
async def next_green_branch(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ó–µ–ª–µ–Ω–∞ –≥—ñ–ª–∫–∞', reply_markup=keybord.keyboard_green_branch2)


@dp.callback_query_handler(lambda c: c.data == 'Back_green_branch')
async def back_green_branch(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ó–µ–ª–µ–Ω–∞ –≥—ñ–ª–∫–∞', reply_markup=keybord.keyboard_green_branch1)


if __name__ == '__main__':
    aiogram.executor.start_polling(dp, skip_updates=True)
