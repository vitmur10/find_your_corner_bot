import aiogram
import sqlite3
import random

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

import keybord
from Const import TOKEN

# Initialize bot and dispatcher
bot = aiogram.Bot(token=TOKEN)
storage = MemoryStorage()
dp = aiogram.Dispatcher(bot, storage=storage)

con = sqlite3.connect("bd")
cur = con.cursor()


@dp.message_handler(commands=['start'])
async def hello(message: aiogram.types.Message):
    await message.answer("     Hello everybody üëã\n–¢–∏ —î–¥–∏–Ω–∏–π, —Ö—Ç–æ –Ω–∞—Å –∑–Ω–∞–π—à–æ–≤, –∞–ª–µ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—ñ–πü§ó\n"
                         "–¢–∏ –≤–∂–µ –ø—ñ–¥–Ω—è–≤ –µ–∫–æ–Ω–æ–º—ñ–∫—É –£–∫—Ä–∞—ó–Ω–∏, –±—É–¥—É—á–∏ —Ç—É—Çüá∫üá¶ \n"
                         "–¢–∏ –≥–æ—Ç–æ–≤–∏–π –∑–Ω–∞–π—Ç–∏ —Ä–∞–π—Å—å–∫–µ –º—ñ—Å—Ü–µ –±–µ–∑–ø–µ–∫–∏ —Ç–∞ —â–µ –π –ø–æ—á—É–≤–∞—Ç–∏—Å—è —è–∫ –≤–¥–æ–º–∞?\n"
                         "–¢–æ–¥—ñ –æ–±–∏—Ä–∞–π —Å–≤—ñ–π –∫—É—Ç–æ—á–æ–∫üëá", reply_markup=keybord.keyboard_menu)


class Location(StatesGroup):
    name = State()
    city = State()
    type = State()
    address = State()
    fishnet = State()


@dp.message_handler(commands=['add_loc'], commands_prefix='/')
async def add_location(message: aiogram.types.Message):
    await Location.name.set()
    await message.answer("—Ç–∏–ø")


@dp.message_handler(state=Location.name)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def name(message: aiogram.types.Message, state: FSMContext):
    async with state.proxy() as data:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        data['name'] = message.text
    await message.answer("–ú—ñ—Å—Ç–æ —ñ —Ç–∏–ø")
    await Location.next()


@dp.message_handler(state=Location.city)
async def type(message: aiogram.types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text
    await message.answer("–ê–¥—Ä–µ—Å")
    await Location.next()


@dp.message_handler(state=Location.type)
async def type(message: aiogram.types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['type'] = message.text
    await message.answer("–ê–¥—Ä–µ—Å")
    await Location.next()


@dp.message_handler(state=Location.address)
async def address(message: aiogram.types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['address'] = message.text
    await message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∏–ª–∫—É')
    await Location.next()


@dp.message_handler(state=Location.fishnet)
async def fishnet(message: aiogram.types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['fishnet'] = message.text
    await state.finish()
    print(data)
    data = [
        (Location.name, Location.city, Location.type, Location.address, Location.fishnet)
    ]
    await message.answer(data)
    cur.executemany("INSERT INTO location VALUES(?, ?, ?, ?, ?)", data)
    con.commit()
    await message.answer(
        f' –õ–æ–∫–∞—Ü—ñ—é {Location.name} –±—É–ª–æ –¥–æ–¥–∞–Ω–æ\n'
        f'–ú—ñ—Å—Ç–æ:{Location.city}\n'
        f'–ê–¥—Ä–µ—Å:{Location.address}\n'
        f'–°–∏–ª–∫–∞:{Location.fishnet}')


@dp.message_handler(content_types=['text'])
async def one(message: aiogram.types.Message):
    if message.text == '–ó–∞–±—É—Ç—ñ –º—ñ—Å—Ü—è –ö–∏—î–≤–∞':
        await message.answer("–û—Å—å –∑–∞–±—É—Ç—ñ –º—ñ—Å—Ü—è –ö–∏—î–≤–∞")
        for name, city, type, address, fishnet, about, photo in cur.execute(
                "SELECT name, city, type, address, fishnet, about, photo  FROM location WHERE type = '–ó–∞–±—É—Ç—ñ –º—ñ—Å—Ü—è –ö–∏—î–≤–∞'"):
            """            await message.answer(f"ü´ß–ù–∞–∑–≤–∞:{name}\n"
                                     f"{about}\n"
                                     f"üìç–ê–¥—Ä–µ—Å–∞:{address}\n"
                                     f"{fishnet}")"""
            await bot.send_photo(message.chat.id,
                                 photo,
                                 f"ü´ß–ù–∞–∑–≤–∞:{name}\n"
                                 f"{about}\n"
                                 f"üìç–ê–¥—Ä–µ—Å–∞:{address}\n"
                                 f"{fishnet}")

    elif message.text == "–ö–∞—Ñ–µ":
        await message.answer('–û—Å—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∫–∞—Ñ–µ')
        for name, city, type, address, fishnet, about, photo in cur.execute(
                "SELECT name, city, type, address, fishnet, about, photo  FROM location WHERE type = '–ö–∞—Ñ–µ'"):
            """            await message.answer(f"ü´ß–ù–∞–∑–≤–∞:{name}\n"
                                 f"{about}\n"
                                 f"üìç–ê–¥—Ä–µ—Å–∞:{address}\n"
                                 f"{fishnet}")"""
            await bot.send_photo(message.chat.id, photo,
                                 f"ü´ß–ù–∞–∑–≤–∞:{name}\n"
                                 f"{about}\n"
                                 f"üìç–ê–¥—Ä–µ—Å–∞:{address}\n"
                                 f"{fishnet}")

    elif message.text == '–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ –Ω–∞ –ø—Ä–∏—Ä–æ–¥—ñ':
        await message.answer("–û—Å—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É –Ω–∞ –ø—Ä–∏—Ä–æ–¥—ñ")
        for name, city, type, address, fishnet, about, photo in cur.execute(
                "SELECT name, city, type, address, fishnet, about, photo  FROM location WHERE type = '–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ –Ω–∞ –ø—Ä–∏—Ä–æ–¥—ñ'"):
            """            await message.answer(f"ü´ß–ù–∞–∑–≤–∞:{name}\n"
                                     f"{about}\n"
                                     f"üìç–ê–¥—Ä–µ—Å–∞:{address}\n"
                                     f"{fishnet}")"""
            await bot.send_photo(message.chat.id,
                                 photo,
                                 f"ü´ß–ù–∞–∑–≤–∞:{name}\n"
                                 f"{about}\n"
                                 f"üìç–ê–¥—Ä–µ—Å–∞:{address}\n"
                                 f"{fishnet}")
    elif message.text == '–ê–∫—Ç–∏–≤–Ω–∏–π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫':
        await message.answer("–û—Å—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É")
        for name, city, type, address, fishnet, about, photo in cur.execute(
                "SELECT name, city, type, address, fishnet, about, photo  FROM location WHERE type = '–ê–∫—Ç–∏–≤–Ω–∏–π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫'"):
            """ await message.answer(f"ü´ß–ù–∞–∑–≤–∞:{name}\n"
                                     f"{about}\n"
                                     f"üìç–ê–¥—Ä–µ—Å–∞:{address}\n"
                                     f"{fishnet}")"""
            await bot.send_photo(message.chat.id,
                                 photo,
                                 f"ü´ß–ù–∞–∑–≤–∞:{name}\n"
                                 f"{about}\n"
                                 f"üìç–ê–¥—Ä–µ—Å–∞:{address}\n"
                                 f"{fishnet}")

@dp.message_handler(content_types=['text'])
async def filter_messages(message: types.Message):

    a = ['–í—ñ–¥–ø–æ—á–∏–Ω—å', '–í—Å–µ –±—É–¥–µ –¥–æ–±—Ä–µ']
    b = ['–£ —Ç–µ–±–µ –¥—É–∂–µ –≥–∞—Ä–Ω–∞ –ø–æ—Å–º—ñ—à–∫–∞', '–ù–µ –¥—É–º–∞–π –ø—Ä–æ –ø–æ–≥–∞–Ω–µ', '–í—Å–µ –±—É–¥–µ –¥–æ–±—Ä–µ']
    c = ['–£ —Ç–µ–±–µ –≤—Å–µ –≤–∏–π–¥–µ', '–í—Å–µ –±—É–¥–µ –¥–æ–±—Ä–µ']
    characters = {
        'z': '–í–∏–π–¥–∏ –æ—Ç—Å—é–¥–∞ —Ä–æ–∑–±—ñ–π–Ω–∏–∫üßèüßèüßè',
        'v': '–ü–∏–∑–¥—É–π—Ç–µ –Ω–∞—Ö—É–π –æ—Ç—Å—é–¥–∞ –π–æ–±–∞–Ω–∏—î –ø—ñ–¥–∞—Ä–∞—Å–∏üë®‚Äçü¶≤üë®‚Äçü¶≤üë®‚Äçü¶≤',
        'vz': '–ü–∏–∑–¥–µ—Ü—å —Ä–æ—Å—ñ–π—Å—å–∫—ñ–π —Ñ–µ–¥–µ—Ä–∞—Ü—ñ—ó‚ö∞Ô∏è‚ö∞Ô∏è‚ö∞Ô∏è',
        '–Ø –≤—Ç–æ–º–∏–≤—Å—è': a[random.randrange(0, len(a))],
        '–ú–µ–Ω—ñ —Å—É–º–Ω–æ': b[random.randrange(0, len(b))],
        '–Ø –±—ñ–ª—å—à–µ –Ω–µ –º–æ–∂—É': c[random.randrange(0, len(c))],
        '–Ø –≤—Ç–æ–º–∏–ª–∞—Å—è': a[random.randrange(0, len(a))]
    }
    for key in characters:
        if key == message.text:
            await message.reply(
                characters[key])
        elif set(key) == set(message.text.lower()):
            await message.reply(
                characters[key])

if __name__ == '__main__':
    aiogram.executor.start_polling(dp, skip_updates=True)
