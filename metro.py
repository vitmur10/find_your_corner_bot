import aiogram
from aiogram.utils import callback_data

import keybord
from Const import bot, dp, cur, con


@dp.callback_query_handler()
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = ?", callback_data):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Independence_Square')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ú–∞–π–¥–∞–Ω –ù–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Heroes_of_the_Dnipro')
async def heroes_of_the_dnipro(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ì–µ—Ä–æ—ó–≤ –î–Ω—ñ–ø—Ä–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Minsk')
async def minsk(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ú—ñ–Ω—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Obolon')
async def obolon(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–û–±–æ–ª–æ–Ω—å'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Petrivka')
async def petrivka(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ü–µ—Ç—Ä—ñ–≤–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Taras_Shevchenko')
async def taras_Shevchenko(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–¢–∞—Ä–∞—Å–∞ –®–µ–≤—á–µ–Ω–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Contract_area')
async def contract_area(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ö–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤–∞ –ø–ª–æ—â–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Postal_square')
async def postal_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ü–æ—à—Ç–æ–≤–∞ –ø–ª–æ—â–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Leo_Tolstoy_Square')
async def leo_tolstoy_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ü–ª–æ—â–∞ –õ—å–≤–∞ –¢–æ–ª—Å—Ç–æ–≥–æ'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Olympic')
async def olympic(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–û–ª—ñ–º–ø—ñ–π—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Palace_Ukraine')
async def palace_Ukraine(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ü–∞–ª–∞—Ü –£–∫—Ä–∞—ó–Ω–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Lybidska')
async def lybidska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–õ–∏–±—ñ–¥—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Demyivska')
async def holosiivska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–î–µ–º–∏—ó–≤—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Holosiivska')
async def next1(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ì–æ–ª–æ—Å—ñ—ó–≤—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Vasylkivska')
async def vasylkivska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–í–∞—Å–∏–ª—å–∫—ñ–≤—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Exhibition_center')
async def exhibition_center(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–í–∏—Å—Ç–∞–≤–æ—á–Ω–∏–π —Ü–µ–Ω—Ç—Ä'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Racetrack')
async def racetrack(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–Ü–ø–æ–¥—Ä–æ–º'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Teremka')
async def teremka(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–¢–µ—Ä–µ–º–∫–∏'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Red_village')
async def red_village(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ß–µ—Ä–≤–æ–Ω–∏–π —Ö—É—Ç—ñ—Ä'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Boryspilska')
async def boryspilska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ë–æ—Ä–∏—Å–ø—ñ–ª—å—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Vyrlitsa')
async def vyrlitsa(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–í–∏—Ä–ª–∏—Ü—è'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Kharkivska')
async def kharkivska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Poznyaks')
async def poznyaks(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ü–æ–∑–Ω—è–∫–∏'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Slavutych')
async def slavutych(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–°–ª–∞–≤—É—Ç–∏—á'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Vydubychi')
async def vydubychi(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–í–∏–¥—É–±–∏—á—ñ'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Friendship_of_peoples')
async def friendship_of_peoples(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–î—Ä—É–∂–±–∞ –Ω–∞—Ä–æ–¥—ñ–≤'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Klovska')
async def klovska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ö–ª–æ–≤—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Pecherska')
async def pecherska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ü–µ—á–µ—Ä—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Palace_of_Sports')
async def palace_of_sports(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Golden_Gate')
async def golden_Gate(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ó–æ–ª–æ—Ç—ñ –≤–æ—Ä–æ—Ç–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Lukyanivska')
async def lukyanivska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–õ—É–∫—è–Ω—ñ–≤—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'dear_ones')
async def dear_ones(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–î–æ—Ä–æ–≥–æ–∂–∏—á—ñ'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'raw')
async def raw(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–°–∏—Ä–µ—Ü—å'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Akademistechko')
async def akademistechko(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ê–∫–∞–¥–µ–º–º—ñ—Å—Ç–µ—á–∫–æ'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Zhytomyr')
async def zhytomyr(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Svyatoshyn')
async def svyatoshyn(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–°–≤—è—Ç–æ—à–∏–Ω'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Nykvy')
async def nykvy(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ù–∏–≤–∫–∏'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Beresteyska')
async def beresteyska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ë–µ—Ä–µ—Å—Ç–µ–π—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Shulyavska')
async def shulyavska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–®—É–ª—è–≤—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Polytechnic_Institute')
async def polytechnic_Institute(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ü–æ–ª—ñ—Ç–µ—Ö–Ω—ñ—á–Ω–∏–π —ñ–Ω—Å—Ç–∏—Ç—É—Ç'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Svyatoshyn')
async def svyatoshyn(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–°–≤—è—Ç–æ—à–∏–Ω'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Station')
async def station(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–í–æ–∫–∑–∞–ª—å–Ω–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'University')
async def university(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Theatrical')
async def theatrical(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Khreshchatyk')
async def khreshchatyk(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–•—Ä–µ—â–∞—Ç–∏–∫'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Arsenal')
async def arsenal(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ê—Ä—Å–µ–Ω–∞–ª—å–Ω–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Dnipro')
async def dnipro(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–î–Ω—ñ–ø—Ä–æ'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Hydropark')
async def hydropark(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ì—ñ–¥—Ä–æ–ø–∞—Ä–∫'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Left_bank')
async def left_bank(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–õ—ñ–≤–æ–±–µ—Ä–µ–∂–Ω–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Gift')
async def gift(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–î–∞—Ä–Ω–∏—Ü—è'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Chernihivska')
async def chernihivska(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Lisova')
async def lisova(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for name, city, type, address, fishnet, about, photo, metro, time, cost in cur.execute(
            "SELECT name, city, type, address, fishnet, about, photo, metro, time, cost  FROM location WHERE metro = '–õ—ñ—Å–æ–≤–∞'"):
        await bot.send_photo(callback_query.from_user.id,
                             photo,
                             f"ü´ß{name}\n"
                             f"{about}\n"
                             f"üìç–ê–¥—Ä–µ—Å–∞ - {address}\n"
                             f"–°—Ç–∞–Ω—Ü—ñ—è –º–µ—Ç—Ä–æ - {metro}\n"
                             f"–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ {time}\n"
                             f"–í–∞—Ä—Ç—ñ—Å—Ç—å - {cost}\n"
                             f"{fishnet}")


@dp.callback_query_handler(lambda c: c.data == 'Next_red_branch')
async def next_red_branch(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ß–µ—Ä–≤–æ–Ω–∞ –≥—ñ–ª–∫–∞', reply_markup=keybord.keyboard_red_branch2)


@dp.callback_query_handler(lambda c: c.data == 'Back_red_branch')
async def back_red_branch(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ß–µ—Ä–≤–æ–Ω–∞ –≥—ñ–ª–∫–∞', reply_markup=keybord.keyboard_red_branch1)


@dp.callback_query_handler(lambda c: c.data == 'Next_blue_branch')
async def next_blue_branch(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–°–∏–Ω—è –≥—ñ–ª–∫–∞', reply_markup=keybord.keyboard_blue_branch2)


@dp.callback_query_handler(lambda c: c.data == 'Back_blue_branch')
async def back_blue_branch(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–°–∏–Ω—è –≥—ñ–ª–∫–∞', reply_markup=keybord.keyboard_blue_branch1)


@dp.callback_query_handler(lambda c: c.data == 'Next_green_branch')
async def next_green_branch(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ó–µ–ª–µ–Ω–∞ –≥—ñ–ª–∫–∞', reply_markup=keybord.keyboard_green_branch2)


@dp.callback_query_handler(lambda c: c.data == 'Back_green_branch')
async def back_green_branch(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ó–µ–ª–µ–Ω–∞ –≥—ñ–ª–∫–∞', reply_markup=keybord.keyboard_green_branch1)
